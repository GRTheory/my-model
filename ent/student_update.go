// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/GRTheory/my-model/ent/predicate"
	"github.com/GRTheory/my-model/ent/student"
	"github.com/GRTheory/my-model/ent/teacher"
)

// StudentUpdate is the builder for updating Student entities.
type StudentUpdate struct {
	config
	hooks    []Hook
	mutation *StudentMutation
}

// Where appends a list predicates to the StudentUpdate builder.
func (su *StudentUpdate) Where(ps ...predicate.Student) *StudentUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetSID sets the "s_id" field.
func (su *StudentUpdate) SetSID(i int) *StudentUpdate {
	su.mutation.ResetSID()
	su.mutation.SetSID(i)
	return su
}

// AddSID adds i to the "s_id" field.
func (su *StudentUpdate) AddSID(i int) *StudentUpdate {
	su.mutation.AddSID(i)
	return su
}

// SetNaem sets the "naem" field.
func (su *StudentUpdate) SetNaem(s string) *StudentUpdate {
	su.mutation.SetNaem(s)
	return su
}

// SetNillableNaem sets the "naem" field if the given value is not nil.
func (su *StudentUpdate) SetNillableNaem(s *string) *StudentUpdate {
	if s != nil {
		su.SetNaem(*s)
	}
	return su
}

// SetAge sets the "age" field.
func (su *StudentUpdate) SetAge(i int) *StudentUpdate {
	su.mutation.ResetAge()
	su.mutation.SetAge(i)
	return su
}

// AddAge adds i to the "age" field.
func (su *StudentUpdate) AddAge(i int) *StudentUpdate {
	su.mutation.AddAge(i)
	return su
}

// SetTeachersID sets the "teachers" edge to the Teacher entity by ID.
func (su *StudentUpdate) SetTeachersID(id int) *StudentUpdate {
	su.mutation.SetTeachersID(id)
	return su
}

// SetTeachers sets the "teachers" edge to the Teacher entity.
func (su *StudentUpdate) SetTeachers(t *Teacher) *StudentUpdate {
	return su.SetTeachersID(t.ID)
}

// Mutation returns the StudentMutation object of the builder.
func (su *StudentUpdate) Mutation() *StudentMutation {
	return su.mutation
}

// ClearTeachers clears the "teachers" edge to the Teacher entity.
func (su *StudentUpdate) ClearTeachers() *StudentUpdate {
	su.mutation.ClearTeachers()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *StudentUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, StudentMutation](ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *StudentUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *StudentUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *StudentUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *StudentUpdate) check() error {
	if _, ok := su.mutation.TeachersID(); su.mutation.TeachersCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Student.teachers"`)
	}
	return nil
}

func (su *StudentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   student.Table,
			Columns: student.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: student.FieldID,
			},
		},
	}
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.SID(); ok {
		_spec.SetField(student.FieldSID, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedSID(); ok {
		_spec.AddField(student.FieldSID, field.TypeInt, value)
	}
	if value, ok := su.mutation.Naem(); ok {
		_spec.SetField(student.FieldNaem, field.TypeString, value)
	}
	if value, ok := su.mutation.Age(); ok {
		_spec.SetField(student.FieldAge, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedAge(); ok {
		_spec.AddField(student.FieldAge, field.TypeInt, value)
	}
	if su.mutation.TeachersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   student.TeachersTable,
			Columns: []string{student.TeachersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: teacher.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.TeachersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   student.TeachersTable,
			Columns: []string{student.TeachersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: teacher.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{student.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// StudentUpdateOne is the builder for updating a single Student entity.
type StudentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StudentMutation
}

// SetSID sets the "s_id" field.
func (suo *StudentUpdateOne) SetSID(i int) *StudentUpdateOne {
	suo.mutation.ResetSID()
	suo.mutation.SetSID(i)
	return suo
}

// AddSID adds i to the "s_id" field.
func (suo *StudentUpdateOne) AddSID(i int) *StudentUpdateOne {
	suo.mutation.AddSID(i)
	return suo
}

// SetNaem sets the "naem" field.
func (suo *StudentUpdateOne) SetNaem(s string) *StudentUpdateOne {
	suo.mutation.SetNaem(s)
	return suo
}

// SetNillableNaem sets the "naem" field if the given value is not nil.
func (suo *StudentUpdateOne) SetNillableNaem(s *string) *StudentUpdateOne {
	if s != nil {
		suo.SetNaem(*s)
	}
	return suo
}

// SetAge sets the "age" field.
func (suo *StudentUpdateOne) SetAge(i int) *StudentUpdateOne {
	suo.mutation.ResetAge()
	suo.mutation.SetAge(i)
	return suo
}

// AddAge adds i to the "age" field.
func (suo *StudentUpdateOne) AddAge(i int) *StudentUpdateOne {
	suo.mutation.AddAge(i)
	return suo
}

// SetTeachersID sets the "teachers" edge to the Teacher entity by ID.
func (suo *StudentUpdateOne) SetTeachersID(id int) *StudentUpdateOne {
	suo.mutation.SetTeachersID(id)
	return suo
}

// SetTeachers sets the "teachers" edge to the Teacher entity.
func (suo *StudentUpdateOne) SetTeachers(t *Teacher) *StudentUpdateOne {
	return suo.SetTeachersID(t.ID)
}

// Mutation returns the StudentMutation object of the builder.
func (suo *StudentUpdateOne) Mutation() *StudentMutation {
	return suo.mutation
}

// ClearTeachers clears the "teachers" edge to the Teacher entity.
func (suo *StudentUpdateOne) ClearTeachers() *StudentUpdateOne {
	suo.mutation.ClearTeachers()
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *StudentUpdateOne) Select(field string, fields ...string) *StudentUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Student entity.
func (suo *StudentUpdateOne) Save(ctx context.Context) (*Student, error) {
	return withHooks[*Student, StudentMutation](ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *StudentUpdateOne) SaveX(ctx context.Context) *Student {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *StudentUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *StudentUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *StudentUpdateOne) check() error {
	if _, ok := suo.mutation.TeachersID(); suo.mutation.TeachersCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Student.teachers"`)
	}
	return nil
}

func (suo *StudentUpdateOne) sqlSave(ctx context.Context) (_node *Student, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   student.Table,
			Columns: student.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: student.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Student.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, student.FieldID)
		for _, f := range fields {
			if !student.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != student.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.SID(); ok {
		_spec.SetField(student.FieldSID, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedSID(); ok {
		_spec.AddField(student.FieldSID, field.TypeInt, value)
	}
	if value, ok := suo.mutation.Naem(); ok {
		_spec.SetField(student.FieldNaem, field.TypeString, value)
	}
	if value, ok := suo.mutation.Age(); ok {
		_spec.SetField(student.FieldAge, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedAge(); ok {
		_spec.AddField(student.FieldAge, field.TypeInt, value)
	}
	if suo.mutation.TeachersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   student.TeachersTable,
			Columns: []string{student.TeachersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: teacher.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.TeachersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   student.TeachersTable,
			Columns: []string{student.TeachersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: teacher.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Student{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{student.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
