// Code generated by ent, DO NOT EDIT.

package student

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/GRTheory/my-model/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Student {
	return predicate.Student(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Student {
	return predicate.Student(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Student {
	return predicate.Student(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Student {
	return predicate.Student(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Student {
	return predicate.Student(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Student {
	return predicate.Student(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Student {
	return predicate.Student(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Student {
	return predicate.Student(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Student {
	return predicate.Student(sql.FieldLTE(FieldID, id))
}

// SID applies equality check predicate on the "s_id" field. It's identical to SIDEQ.
func SID(v int) predicate.Student {
	return predicate.Student(sql.FieldEQ(FieldSID, v))
}

// Naem applies equality check predicate on the "naem" field. It's identical to NaemEQ.
func Naem(v string) predicate.Student {
	return predicate.Student(sql.FieldEQ(FieldNaem, v))
}

// Age applies equality check predicate on the "age" field. It's identical to AgeEQ.
func Age(v int) predicate.Student {
	return predicate.Student(sql.FieldEQ(FieldAge, v))
}

// SIDEQ applies the EQ predicate on the "s_id" field.
func SIDEQ(v int) predicate.Student {
	return predicate.Student(sql.FieldEQ(FieldSID, v))
}

// SIDNEQ applies the NEQ predicate on the "s_id" field.
func SIDNEQ(v int) predicate.Student {
	return predicate.Student(sql.FieldNEQ(FieldSID, v))
}

// SIDIn applies the In predicate on the "s_id" field.
func SIDIn(vs ...int) predicate.Student {
	return predicate.Student(sql.FieldIn(FieldSID, vs...))
}

// SIDNotIn applies the NotIn predicate on the "s_id" field.
func SIDNotIn(vs ...int) predicate.Student {
	return predicate.Student(sql.FieldNotIn(FieldSID, vs...))
}

// SIDGT applies the GT predicate on the "s_id" field.
func SIDGT(v int) predicate.Student {
	return predicate.Student(sql.FieldGT(FieldSID, v))
}

// SIDGTE applies the GTE predicate on the "s_id" field.
func SIDGTE(v int) predicate.Student {
	return predicate.Student(sql.FieldGTE(FieldSID, v))
}

// SIDLT applies the LT predicate on the "s_id" field.
func SIDLT(v int) predicate.Student {
	return predicate.Student(sql.FieldLT(FieldSID, v))
}

// SIDLTE applies the LTE predicate on the "s_id" field.
func SIDLTE(v int) predicate.Student {
	return predicate.Student(sql.FieldLTE(FieldSID, v))
}

// NaemEQ applies the EQ predicate on the "naem" field.
func NaemEQ(v string) predicate.Student {
	return predicate.Student(sql.FieldEQ(FieldNaem, v))
}

// NaemNEQ applies the NEQ predicate on the "naem" field.
func NaemNEQ(v string) predicate.Student {
	return predicate.Student(sql.FieldNEQ(FieldNaem, v))
}

// NaemIn applies the In predicate on the "naem" field.
func NaemIn(vs ...string) predicate.Student {
	return predicate.Student(sql.FieldIn(FieldNaem, vs...))
}

// NaemNotIn applies the NotIn predicate on the "naem" field.
func NaemNotIn(vs ...string) predicate.Student {
	return predicate.Student(sql.FieldNotIn(FieldNaem, vs...))
}

// NaemGT applies the GT predicate on the "naem" field.
func NaemGT(v string) predicate.Student {
	return predicate.Student(sql.FieldGT(FieldNaem, v))
}

// NaemGTE applies the GTE predicate on the "naem" field.
func NaemGTE(v string) predicate.Student {
	return predicate.Student(sql.FieldGTE(FieldNaem, v))
}

// NaemLT applies the LT predicate on the "naem" field.
func NaemLT(v string) predicate.Student {
	return predicate.Student(sql.FieldLT(FieldNaem, v))
}

// NaemLTE applies the LTE predicate on the "naem" field.
func NaemLTE(v string) predicate.Student {
	return predicate.Student(sql.FieldLTE(FieldNaem, v))
}

// NaemContains applies the Contains predicate on the "naem" field.
func NaemContains(v string) predicate.Student {
	return predicate.Student(sql.FieldContains(FieldNaem, v))
}

// NaemHasPrefix applies the HasPrefix predicate on the "naem" field.
func NaemHasPrefix(v string) predicate.Student {
	return predicate.Student(sql.FieldHasPrefix(FieldNaem, v))
}

// NaemHasSuffix applies the HasSuffix predicate on the "naem" field.
func NaemHasSuffix(v string) predicate.Student {
	return predicate.Student(sql.FieldHasSuffix(FieldNaem, v))
}

// NaemEqualFold applies the EqualFold predicate on the "naem" field.
func NaemEqualFold(v string) predicate.Student {
	return predicate.Student(sql.FieldEqualFold(FieldNaem, v))
}

// NaemContainsFold applies the ContainsFold predicate on the "naem" field.
func NaemContainsFold(v string) predicate.Student {
	return predicate.Student(sql.FieldContainsFold(FieldNaem, v))
}

// AgeEQ applies the EQ predicate on the "age" field.
func AgeEQ(v int) predicate.Student {
	return predicate.Student(sql.FieldEQ(FieldAge, v))
}

// AgeNEQ applies the NEQ predicate on the "age" field.
func AgeNEQ(v int) predicate.Student {
	return predicate.Student(sql.FieldNEQ(FieldAge, v))
}

// AgeIn applies the In predicate on the "age" field.
func AgeIn(vs ...int) predicate.Student {
	return predicate.Student(sql.FieldIn(FieldAge, vs...))
}

// AgeNotIn applies the NotIn predicate on the "age" field.
func AgeNotIn(vs ...int) predicate.Student {
	return predicate.Student(sql.FieldNotIn(FieldAge, vs...))
}

// AgeGT applies the GT predicate on the "age" field.
func AgeGT(v int) predicate.Student {
	return predicate.Student(sql.FieldGT(FieldAge, v))
}

// AgeGTE applies the GTE predicate on the "age" field.
func AgeGTE(v int) predicate.Student {
	return predicate.Student(sql.FieldGTE(FieldAge, v))
}

// AgeLT applies the LT predicate on the "age" field.
func AgeLT(v int) predicate.Student {
	return predicate.Student(sql.FieldLT(FieldAge, v))
}

// AgeLTE applies the LTE predicate on the "age" field.
func AgeLTE(v int) predicate.Student {
	return predicate.Student(sql.FieldLTE(FieldAge, v))
}

// HasTeachers applies the HasEdge predicate on the "teachers" edge.
func HasTeachers() predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TeachersTable, TeachersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTeachersWith applies the HasEdge predicate on the "teachers" edge with a given conditions (other predicates).
func HasTeachersWith(preds ...predicate.Teacher) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TeachersInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TeachersTable, TeachersColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Student) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Student) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Student) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		p(s.Not())
	})
}
